{"version":3,"file":"static/js/317.3ac0e46f.chunk.js","mappings":"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","sources":["components/ValidationUserYup/ValidationUserYup.jsx","webpack://goose_track/./src/components/RegisterForm/RegisterForm.module.scss?ecac","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import * as Yup from \"yup\";\n\nexport const registerUserSchema = Yup.object().shape({\n    name: Yup.string().min(3, 'Too Short!').max(36, 'Too Long!').required('Required!'),\n    email: Yup.string().email('Invalid email!').required('Required!'),\n    password: Yup.string()\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol')\n    .required('Required!'),\n});\n\n\nexport const loginUserSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Required!'),\n    password: Yup.string()\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol')\n    .required('Required!'),\n});","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RegisterForm_container__kVfjz\",\"form\":\"RegisterForm_form__5aEEn\",\"title\":\"RegisterForm_title__4Ginu\",\"label\":\"RegisterForm_label__OWQvs\",\"input\":\"RegisterForm_input__IemEh\",\"button\":\"RegisterForm_button__StFIw\",\"link\":\"RegisterForm_link__ryqsU\",\"icon\":\"RegisterForm_icon__qRQe8\",\"bgimages\":\"RegisterForm_bgimages__8Hnju\",\"bgImagesMsg\":\"RegisterForm_bgImagesMsg__l-pFg\",\"bgImagesText\":\"RegisterForm_bgImagesText__Djawe\",\"span\":\"RegisterForm_span__KVG5R\",\"spanIcon\":\"RegisterForm_spanIcon__OwxmC\",\"invalidFeedback\":\"RegisterForm_invalidFeedback__1pcaW\",\"feedback\":\"RegisterForm_feedback__8BLpd\",\"isInvalidLabel\":\"RegisterForm_isInvalidLabel__Cdi6b\",\"isInvalid\":\"RegisterForm_isInvalid__36EPl\",\"btnToggle\":\"RegisterForm_btnToggle__B2fX8\"};","import { Link } from \"react-router-dom\";\nimport {Formik, Form, Field, ErrorMessage} from \"formik\";\nimport { registerUserSchema } from \"components/ValidationUserYup/ValidationUserYup\";\nimport scss from './RegisterForm.module.scss';\nimport { FiLogIn } from 'react-icons/fi';\nimport { useDispatch } from 'react-redux';\nimport {authRegisterThunk} from '../../redux/user/user-operations';\nimport {BsEyeSlashFill } from 'react-icons/bs';\nimport {BsEyeFill } from 'react-icons/bs';\nimport { useState } from 'react';\n\nconst initialState = {\n    name: '',\n    email: '',\n    password: '',\n};\n\nexport const RegisterForm = () => {\n    const dispatch = useDispatch();\n\n    const [type, setType] = useState('password');\n    const [icon, setIcon] = useState(<BsEyeSlashFill/>);\n\n    const handleShowPassword = () => {\n        if(type==='password'){\n            setIcon(<BsEyeFill/>);\n            setType('text')\n        } else {\n            setIcon(<BsEyeSlashFill/>);\n            setType('password')\n        }\n    }\n\n    const handleSubmit = async ({name:userName, email, password}, {resetForm}) => {\n        dispatch(authRegisterThunk({ userName, email, password }));\n        resetForm();\n    };\n\n    return (\n        <><div className={scss.container}>\n            <div className={scss.bgimages}></div>\n            <div className={scss.bgImagesMsg}>\n                <p className={scss.bgImagesText}>Quickly <span className={scss.span}>register</span> and familiarize yourself with the application!</p>\n            </div>\n            <Formik const initialValues={initialState}\n                validationSchema={registerUserSchema}\n                onSubmit={handleSubmit}\n            >\n                {({ errors, touched }) => (\n                <Form autoComplete=\"off\" className={scss.form}>\n                    <h1 className={scss.title}>Sing Up</h1>\n                    <label className={(errors.name && touched.name ? scss.isInvalidLabel : scss.label)}>\n                        Name\n                        <Field\n                            id=\"name\"\n                            name=\"name\"\n                            type=\"name\"\n                            placeholder=\"Enter your name\"\n                            className={(errors.name && touched.name ? scss.isInvalid : scss.input)} />\n                        <div className={scss.feedback}><ErrorMessage name=\"name\" component=\"div\" className={scss.invalidFeedback}></ErrorMessage></div>\n                    </label>\n                    <label className={(errors.email && touched.email ? scss.isInvalidLabel : scss.label)}>\n                        Email\n                        <Field\n                            id=\"email\"\n                            name=\"email\"\n                            type=\"email\"\n                            placeholder=\"Enter email\"\n                            className={(errors.email && touched.email ? scss.isInvalid : scss.input)} />\n                        <div className={scss.feedback}><ErrorMessage name=\"email\" component=\"div\" className={scss.invalidFeedback}></ErrorMessage></div>\n                    </label>\n                    <label className={(errors.password && touched.password ? scss.isInvalidLabel : scss.label)}>\n                        Password\n                        <Field\n                            id=\"password\"\n                            name=\"password\"\n                            type={type}\n                            placeholder=\"Enter password\"\n                            className={(errors.password && touched.password ? scss.isInvalid : scss.input)}\n                            />\n                            <button className={scss.btnToggle} type=\"button\" onClick={handleShowPassword} ><div className={scss.spanIcon}>{icon}</div></button>\n                        <div className={scss.feedback}><ErrorMessage name=\"password\" component=\"div\" className={scss.invalidFeedback}></ErrorMessage></div>\n                    </label>\n                    <button className={scss.button} type=\"submit\">Sing Up\n                        <FiLogIn className={scss.icon} />\n                    </button>\n                </Form>)}\n            </Formik>\n            <Link className={scss.link} to=\"/login\">\n                Log In\n            </Link>\n        </div>\n        </>\n        );\n    };","import { RegisterForm } from \"components/RegisterForm/RegisterForm\";\n\n\nexport default function RegisterPage() {\n    return (\n        <div>\n            <RegisterForm />\n        </div>\n    );\n}"],"names":["registerUserSchema","Yup","shape","name","min","max","required","email","password","matches","loginUserSchema","initialState","RegisterForm","dispatch","useDispatch","useState","type","setType","icon","setIcon","handleShowPassword","handleSubmit","userName","resetForm","authRegisterThunk","className","scss","const","initialValues","validationSchema","onSubmit","errors","touched","autoComplete","id","placeholder","component","onClick","to","RegisterPage"],"sourceRoot":""}