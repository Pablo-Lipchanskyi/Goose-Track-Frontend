{"version":3,"file":"static/js/317.f4e41bb2.chunk.js","mappings":"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","sources":["components/ValidationUserYup/ValidationUserYup.jsx","webpack://goose_track/./src/components/RegisterForm/RegisterForm.module.scss?ecac","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import * as Yup from \"yup\";\n\nexport const registerUserSchema = Yup.object().shape({\n    name: Yup.string().min(3, 'Too Short!').max(36, 'Too Long!').required('Required!'),\n    email: Yup.string().email('Invalid email!').required('Required!'),\n    password: Yup.string()\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol')\n    .required('Required!'),\n});\n\n\nexport const loginUserSchema = Yup.object().shape({\n    email: Yup.string().email('This is an ERROR email').required('Required!'),\n    password: Yup.string()\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol')\n    .required('Required!'),\n});","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RegisterForm_container__kVfjz\",\"form\":\"RegisterForm_form__5aEEn\",\"title\":\"RegisterForm_title__4Ginu\",\"label\":\"RegisterForm_label__OWQvs\",\"input\":\"RegisterForm_input__IemEh\",\"button\":\"RegisterForm_button__StFIw\",\"link\":\"RegisterForm_link__ryqsU\",\"icon\":\"RegisterForm_icon__qRQe8\",\"bgimages\":\"RegisterForm_bgimages__8Hnju\",\"bgImagesMsg\":\"RegisterForm_bgImagesMsg__l-pFg\",\"bgImagesText\":\"RegisterForm_bgImagesText__Djawe\",\"span\":\"RegisterForm_span__KVG5R\",\"spanIcon\":\"RegisterForm_spanIcon__OwxmC\",\"labelText\":\"RegisterForm_labelText__7v3Ug\",\"feedback\":\"RegisterForm_feedback__8BLpd\",\"invalidFeedback\":\"RegisterForm_invalidFeedback__1pcaW\",\"isInvalidLabel\":\"RegisterForm_isInvalidLabel__Cdi6b\",\"isValidLabel\":\"RegisterForm_isValidLabel__1BsG5\",\"isInvalid\":\"RegisterForm_isInvalid__36EPl\",\"btnToggle\":\"RegisterForm_btnToggle__B2fX8\",\"isValid\":\"RegisterForm_isValid__E2JEQ\"};","import { Link } from 'react-router-dom';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { registerUserSchema } from 'components/ValidationUserYup/ValidationUserYup';\nimport scss from './RegisterForm.module.scss';\nimport { FiLogIn } from 'react-icons/fi';\nimport { useDispatch } from 'react-redux';\nimport { authRegisterThunk } from '../../redux/user/user-operations';\nimport { BsEyeSlashFill } from 'react-icons/bs';\nimport { BsEyeFill } from 'react-icons/bs';\nimport { useState } from 'react';\n\nconst initialState = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  const [type, setType] = useState('password');\n  const [icon, setIcon] = useState(<BsEyeSlashFill />);\n\n  const handleShowPassword = () => {\n    if (type === 'password') {\n      setIcon(<BsEyeFill />);\n      setType('text');\n    } else {\n      setIcon(<BsEyeSlashFill />);\n      setType('password');\n    }\n  };\n\n  const handleSubmit = async (\n    { name: userName, email, password },\n    { resetForm }\n  ) => {\n    dispatch(authRegisterThunk({ userName, email, password }));\n    resetForm();\n  };\n\n  return (\n    <>\n      <div className={scss.container}>\n        <div className={scss.bgimages}></div>\n        <div className={scss.bgImagesMsg}>\n          <p className={scss.bgImagesText}>\n            Quickly <span className={scss.span}>register</span> and familiarize\n            yourself with the application!\n          </p>\n        </div>\n        <Formik\n          const\n          initialValues={initialState}\n          validationSchema={registerUserSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ errors, touched }) => (\n            <Form autoComplete=\"off\" className={scss.form}>\n              <h1 className={scss.title}>Sing Up</h1>\n              <label\n                className={\n                  errors.name && touched.name\n                    ? scss.isInvalidLabel\n                    : touched.name\n                    ? scss.isValidLabel\n                    : scss.label\n                }\n              >\n                <p className={scss.labelText}>Name</p>\n                <Field\n                  id=\"name\"\n                  name=\"name\"\n                  type=\"name\"\n                  placeholder=\"Enter your name\"\n                  className={\n                    errors.name && touched.name\n                      ? scss.isInvalid\n                      : touched.name\n                      ? scss.isValid\n                      : scss.input\n                  }\n                />\n                <div className={scss.feedback}>\n                  <ErrorMessage\n                    name=\"name\"\n                    component=\"div\"\n                    className={scss.invalidFeedback}\n                  ></ErrorMessage>\n                </div>\n              </label>\n              <label\n                className={\n                  errors.email && touched.email\n                    ? scss.isInvalidLabel\n                    : touched.email\n                    ? scss.isValidLabel\n                    : scss.label\n                }\n              >\n                Email\n                <Field\n                  id=\"email\"\n                  name=\"email\"\n                  type=\"email\"\n                  placeholder=\"Enter email\"\n                  className={\n                    errors.email && touched.email\n                      ? scss.isInvalid\n                      : touched.email\n                      ? scss.isValid\n                      : scss.input\n                  }\n                />\n                <div className={scss.feedback}>\n                  <ErrorMessage\n                    name=\"email\"\n                    component=\"div\"\n                    className={scss.invalidFeedback}\n                  ></ErrorMessage>\n                </div>\n              </label>\n              <label\n                className={\n                  errors.password && touched.password\n                    ? scss.isInvalidLabel\n                    : touched.password\n                    ? scss.isValidLabel\n                    : scss.label\n                }\n              >\n                Password\n                <Field\n                  id=\"password\"\n                  name=\"password\"\n                  type={type}\n                  placeholder=\"Enter password\"\n                  className={\n                    errors.password && touched.password\n                      ? scss.isInvalid\n                      : touched.password\n                      ? scss.isValid\n                      : scss.input\n                  }\n                />\n                <button\n                  className={scss.btnToggle}\n                  type=\"button\"\n                  onClick={handleShowPassword}\n                >\n                  <div className={scss.spanIcon}>{icon}</div>\n                </button>\n                <div className={scss.feedback}>\n                  <ErrorMessage\n                    name=\"password\"\n                    component=\"div\"\n                    className={scss.invalidFeedback}\n                  ></ErrorMessage>\n                </div>\n              </label>\n              <button className={scss.button} type=\"submit\">\n                Sing Up\n                <FiLogIn className={scss.icon} />\n              </button>\n            </Form>\n          )}\n        </Formik>\n        <Link className={scss.link} to=\"/login\">\n          Log In\n        </Link>\n      </div>\n    </>\n  );\n};\n","import { RegisterForm } from \"components/RegisterForm/RegisterForm\";\n\n\nexport default function RegisterPage() {\n    return (\n        <div>\n            <RegisterForm />\n        </div>\n    );\n}"],"names":["registerUserSchema","Yup","shape","name","min","max","required","email","password","matches","loginUserSchema","initialState","RegisterForm","dispatch","useDispatch","useState","type","setType","icon","setIcon","handleShowPassword","handleSubmit","userName","resetForm","authRegisterThunk","className","scss","const","initialValues","validationSchema","onSubmit","errors","touched","autoComplete","id","placeholder","component","onClick","to","RegisterPage"],"sourceRoot":""}