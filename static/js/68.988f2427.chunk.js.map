{"version":3,"file":"static/js/68.988f2427.chunk.js","mappings":"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","sources":["components/ValidationUserYup/ValidationUserYup.jsx","webpack://goose_track/./src/components/LoginForm/LoginForm.module.scss?1c6d","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import * as Yup from \"yup\";\n\nexport const registerUserSchema = Yup.object().shape({\n    name: Yup.string().min(3, 'Too Short!').max(36, 'Too Long!').required('Required!'),\n    email: Yup.string().email('Invalid email!').required('Required!'),\n    password: Yup.string()\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol')\n    .required('Required!'),\n});\n\n\nexport const loginUserSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Required!'),\n    password: Yup.string()\n    .min(8, 'Password must be 8 characters long')\n    .matches(/[0-9]/, 'Password requires a number')\n    .matches(/[a-z]/, 'Password requires a lowercase letter')\n    .matches(/[A-Z]/, 'Password requires an uppercase letter')\n    .matches(/[^\\w]/, 'Password requires a symbol')\n    .required('Required!'),\n});","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"LoginForm_container__d3-dh\",\"form\":\"LoginForm_form__Kx5pU\",\"title\":\"LoginForm_title__cvnUl\",\"label\":\"LoginForm_label__RGIMj\",\"input\":\"LoginForm_input__7Ngg7\",\"button\":\"LoginForm_button__ph0FE\",\"link\":\"LoginForm_link__GY3qv\",\"icon\":\"LoginForm_icon__i+0e7\",\"bgimages\":\"LoginForm_bgimages__TRMcl\",\"bgImagesMsg\":\"LoginForm_bgImagesMsg__VCztp\",\"bgImagesText\":\"LoginForm_bgImagesText__9GvuW\",\"span\":\"LoginForm_span__OVKvo\",\"spanIcon\":\"LoginForm_spanIcon__a8YYV\",\"invalidFeedback\":\"LoginForm_invalidFeedback__FiANy\",\"feedback\":\"LoginForm_feedback__Nfbc2\",\"isInvalidLabel\":\"LoginForm_isInvalidLabel__zV8jZ\",\"isInvalid\":\"LoginForm_isInvalid__ocY4W\",\"btnToggle\":\"LoginForm_btnToggle__IoS-D\"};","import { Link, useNavigate } from 'react-router-dom';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nimport {\n  useDispatch, useSelector,\n  // useSelector\n} from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { FiLogIn } from 'react-icons/fi';\nimport { authLoginThunk } from 'redux/user/user-operations';\nimport scss from './LoginForm.module.scss';\nimport { loginUserSchema } from 'components/ValidationUserYup/ValidationUserYup';\nimport {BsEyeSlashFill } from 'react-icons/bs';\nimport {BsEyeFill } from 'react-icons/bs';\nimport { useState } from 'react';\nimport { getCurrentDate } from 'redux/calendar/selectors';\n\n\nconst initialState = {\n  email: '',\n  password: '',\n};\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n    const currentDate = useSelector(getCurrentDate);\n\n  const [type, setType] = useState('password');\n  const [icon, setIcon] = useState(<BsEyeSlashFill/>);\n\n  const handleShowPassword = () => {\n      if(type==='password'){\n          setIcon(<BsEyeFill/>);\n          setType('text')\n      } else {\n          setIcon(<BsEyeSlashFill/>);\n          setType('password')\n      }\n  }\n\n  const handleSubmit = async (values, { resetForm }) => {\n    try {\n      await dispatch(authLoginThunk(values)).unwrap();\n      Notiflix.Notify.success(\"It's ok!\");\n      resetForm();\n      navigate(`/calendar/month/${currentDate.slice(0,7)}`);\n    } catch (error) {\n      console.log(error);\n      Notiflix.Notify.failure('Oops! You make some mistake:-(');\n    }\n  };\n\n  return (\n    <div className={scss.container}>\n      <div className={scss.bgimages}></div>\n      <div className={scss.bgImagesMsg}>\n        <p className={scss.bgImagesText}>\n          Quickly <span className={scss.span}>come in</span> and write down your\n          tasks for the day!\n        </p>\n      </div>\n      <Formik\n        const\n        initialValues={initialState}\n        validationSchema={loginUserSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched, resetForm }) => (\n          <Form autoComplete=\"off\" className={scss.form}>\n            <h1 className={scss.title}>Log In</h1>\n            <label className={(errors.email && touched.email ? scss.isInvalidLabel : scss.label)}>\n                        Email\n                        <Field\n                            id=\"email\"\n                            name=\"email\"\n                            type=\"email\"\n                            placeholder=\"Enter email\"\n                            className={(errors.email && touched.email ? scss.isInvalid : scss.input)} />\n                        <div className={scss.feedback}><ErrorMessage name=\"email\" component=\"div\" className={scss.invalidFeedback}></ErrorMessage></div>\n                    </label>\n            <label className={(errors.password && touched.password ? scss.isInvalidLabel : scss.label)}>\n                        Password\n                        <Field\n                            id=\"password\"\n                            name=\"password\"\n                            type={type}\n                            placeholder=\"Enter password\"\n                            className={(errors.password && touched.password ? scss.isInvalid : scss.input)}\n                            />\n              <button className={scss.btnToggle} type=\"button\" onClick={handleShowPassword} ><div className={scss.spanIcon}>{icon}</div></button>\n              <div className={scss.feedback}><ErrorMessage name=\"password\" component=\"div\" className={scss.invalidFeedback}></ErrorMessage></div>\n            </label>\n            <button className={scss.button} type=\"submit\">\n              Log in\n              <FiLogIn className={scss.icon} />\n            </button>\n          </Form>\n        )}\n      </Formik>\n      <Link className={scss.link} to=\"/register\">\n        Sign up\n      </Link>\n    </div>\n  );\n};\nexport default LoginForm;","import LoginForm from \"components/LoginForm/LoginForm\";\n\nexport default function LoginPage() {\n    return (\n        <div>\n            <LoginForm/>\n        </div>\n    );\n}"],"names":["registerUserSchema","Yup","shape","name","min","max","required","email","password","matches","loginUserSchema","initialState","dispatch","useDispatch","navigate","useNavigate","currentDate","useSelector","getCurrentDate","useState","type","setType","icon","setIcon","handleShowPassword","handleSubmit","values","resetForm","authLoginThunk","unwrap","Notiflix","slice","console","log","className","scss","const","initialValues","validationSchema","onSubmit","errors","touched","autoComplete","id","placeholder","component","onClick","to","LoginPage"],"sourceRoot":""}