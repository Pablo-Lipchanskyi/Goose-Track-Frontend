{"version":3,"file":"static/js/317.fd778eb8.chunk.js","mappings":"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","sources":["components/ValidationUserYup/ValidationUserYup.jsx","webpack://goose_track/./src/components/RegisterForm/RegisterForm.module.scss?ecac","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import * as Yup from \"yup\";\n\nexport const registerUserSchema = Yup.object().shape({\n    name: Yup.string().min(3, 'Too Short!').max(36, 'Too Long!').required('Required'),\n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string().min(6, 'Too Short!').max(16, 'Too Long!').required('Required'),\n});\n\nexport const loginUserSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Required to fill out'),\n    password: Yup.string().min(6, 'Too Short!').max(16, 'Too Long!').required('Required to fill out'),\n});","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RegisterForm_container__kVfjz\",\"form\":\"RegisterForm_form__5aEEn\",\"title\":\"RegisterForm_title__4Ginu\",\"label\":\"RegisterForm_label__OWQvs\",\"input\":\"RegisterForm_input__IemEh\",\"button\":\"RegisterForm_button__StFIw\",\"link\":\"RegisterForm_link__ryqsU\",\"icon\":\"RegisterForm_icon__qRQe8\",\"bgimages\":\"RegisterForm_bgimages__8Hnju\",\"bgImagesMsg\":\"RegisterForm_bgImagesMsg__l-pFg\",\"bgImagesText\":\"RegisterForm_bgImagesText__Djawe\",\"span\":\"RegisterForm_span__KVG5R\",\"invalid-feedback\":\"RegisterForm_invalid-feedback__VYw7r\",\"is-invalid\":\"RegisterForm_is-invalid__DF2kB\",\"is-valid\":\"RegisterForm_is-valid__FGpX0\"};","import { Link } from \"react-router-dom\";\nimport {Formik, Form, Field, ErrorMessage} from \"formik\";\nimport { registerUserSchema } from \"components/ValidationUserYup/ValidationUserYup\";\nimport scss from './RegisterForm.module.scss';\nimport { FiLogIn } from 'react-icons/fi';\nimport { useDispatch } from 'react-redux'\nimport {authRegisterThunk} from '../../redux/auth/auth.thunk'\n\nconst initialState = {\n    name: '',\n    email: '',\n    password: '',\n};\n\nexport const RegisterForm = () => {\n    const dispatch = useDispatch();\n\n    const handleSubmit = async ({name:userName, email, password}, {resetForm}) => {\n        console.log({ userName, email, password });\n        dispatch(authRegisterThunk({ userName, email, password }));\n        resetForm();\n    };\n\n    return (\n    <div className={scss.container}>\n        <div className={scss.bgimages}></div>\n        <div className={scss.bgImagesMsg}>\n            <p className={scss.bgImagesText}>Quickly <span className={scss.span}>register</span> and familiarize yourself with the application!</p>\n        </div>\n        <Formik const initialValues={initialState}\n            validationSchema={registerUserSchema}\n            onSubmit={handleSubmit}\n        >\n            {({ errors, touched, resetForm }) => (\n            <Form autoComplete=\"off\" className={scss.form}>\n                <h1 className={scss.title}>Sing Up</h1>\n                <label className={scss.label +\n                            (errors.name && touched.name ? ' is-invalid' : '')}>\n                    Name\n                    <Field\n                        id=\"name\"\n                        name=\"name\"\n                        type=\"name\"\n                        placeholder=\"Enter your name\"\n                        className={scss.input  +\n                            (errors.name && touched.name ? ' is-invalid' : '')} />\n                    <ErrorMessage name=\"name\" component=\"div\" className=\"invalid-feedback\"></ErrorMessage>\n                </label>\n                <label className={scss.label +\n                            (errors.email && touched.email ? ' is-invalid' : '')}>\n                    Email\n                    <Field\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        placeholder=\"Enter email\"\n                        className={scss.input  +\n                            (errors.email && touched.email ? ' is-invalid' : '')} />\n                    <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\"></ErrorMessage>\n                </label>\n                <label className={scss.label+\n                            (errors.password && touched.password ? ' is-invalid' : '')}>\n                    Password\n                    <Field\n                        id=\"password\"\n                        name=\"password\"\n                        type={'password'}\n                        placeholder=\"Enter password\"\n                        className={scss.input  +\n                            (errors.password && touched.password ? ' is-invalid' : '')} />\n                    <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\"></ErrorMessage>\n                </label>\n                <button className={scss.button} type=\"submit\">Sing Up\n                    <FiLogIn className={scss.icon} />\n                </button>\n            </Form>)}\n        </Formik>\n        <Link className={scss.link} to=\"/login\">\n            Log In\n        </Link>\n    </div>\n    );\n};","import { RegisterForm } from \"components/RegisterForm/RegisterForm\";\n\n\nexport default function RegisterPage() {\n    return (\n        <div>\n            <RegisterForm />\n        </div>\n    );\n}"],"names":["registerUserSchema","Yup","shape","name","min","max","required","email","password","loginUserSchema","initialState","RegisterForm","dispatch","useDispatch","handleSubmit","userName","resetForm","console","log","authRegisterThunk","className","scss","const","initialValues","validationSchema","onSubmit","errors","touched","autoComplete","id","type","placeholder","component","to","RegisterPage"],"sourceRoot":""}