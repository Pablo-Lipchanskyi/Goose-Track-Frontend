{"version":3,"file":"static/js/68.c3301b4b.chunk.js","mappings":"mLAEaA,EAAqBC,EAAAA,KAAaC,MAAM,CACjDC,KAAMF,EAAAA,KAAaG,IAAI,EAAG,cAAcC,IAAI,GAAI,aAAaC,SAAS,YACtEC,MAAON,EAAAA,KAAaM,MAAM,iBAAiBD,SAAS,YACpDE,SAAUP,EAAAA,KAAaG,IAAI,EAAG,cAAcC,IAAI,GAAI,aAAaC,SAAS,cAGjEG,EAAkBR,EAAAA,KAAaC,MAAM,CAC9CK,MAAON,EAAAA,KAAaM,MAAM,iBAAiBD,SAAS,wBACpDE,SAAUP,EAAAA,KAAaG,IAAI,EAAG,cAAcC,IAAI,GAAI,aAAaC,SAAS,yB,oLCT9E,EAA4B,6BAA5B,EAAgE,wBAAhE,EAAgG,yBAAhG,EAAiI,yBAAjI,EAAkK,yBAAlK,EAAoM,0BAApM,EAAqO,wBAArO,EAAoQ,wBAApQ,EAAuS,4BAAvS,EAAiV,+BAAjV,EAA+X,gCAA/X,EAAsa,wB,mBCahaI,EAAe,CACnBH,MAAO,GACPC,SAAU,IA8GZ,EA3GkB,WAIhB,IAAMG,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAQXC,EAAY,mCAAG,WAAOC,EAAP,iFAAiBC,EAAjB,EAAiBA,UACpCC,QAAQC,IAAIH,GADO,kBAIXL,GAASS,EAAAA,EAAAA,IAAeJ,IAASK,SAJtB,OAKjBC,IAAAA,OAAAA,QAAwB,YACxBL,IACAJ,EAAS,mBAPQ,kDASjBK,QAAQC,IAAR,MACAG,IAAAA,OAAAA,QAAwB,kCAVP,0DAAH,wDAclB,OACE,iBAAKC,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,KAChB,gBAAKD,UAAWC,EAAhB,UACE,eAAGD,UAAWC,EAAd,sBACU,iBAAMD,UAAWC,EAAjB,qBADV,gDAKF,SAAC,KAAD,CACEC,OAAK,EACLC,cAAehB,EACfiB,iBAAkBlB,EAAAA,EAClBmB,SAAUb,EAJZ,SAMG,gBAAGc,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,EAAoBb,UAApB,OACC,UAAC,KAAD,CAAMc,aAAa,MAAMR,UAAWC,EAApC,WACE,eAAID,UAAWC,EAAf,qBACA,mBACED,UACEC,GACCK,EAAOtB,OAASuB,EAAQvB,MAAQ,cAAgB,IAHrD,mBAOE,SAAC,KAAD,CACEyB,GAAG,QACH7B,KAAK,QACL8B,KAAK,QACLC,YAAY,cACZX,UACEC,GACCK,EAAOtB,OAASuB,EAAQvB,MAAQ,cAAgB,OAIrD,SAAC,KAAD,CACEJ,KAAK,QACLgC,UAAU,MACVZ,UAAU,yBAGd,mBACEA,UACEC,GACCK,EAAOrB,UAAYsB,EAAQtB,SAAW,cAAgB,IAH3D,sBAOE,SAAC,KAAD,CACEwB,GAAG,WACH7B,KAAK,WACL8B,KAAM,WACNC,YAAY,iBACZX,UACEC,GACCK,EAAOrB,UAAYsB,EAAQtB,SAAW,cAAgB,OAI3D,SAAC,KAAD,CACEL,KAAK,WACLgC,UAAU,MACVZ,UAAU,yBAGd,oBAAQA,UAAWC,EAAaS,KAAK,SAArC,oBAEE,SAAC,MAAD,CAASV,UAAWC,SArDzB,KA0DH,SAAC,KAAD,CAAMD,UAAWC,EAAWY,GAAG,YAA/B,uBAKL,EC1Hc,SAASC,IACpB,OACI,0BACI,SAAC,EAAD,KAGX,C","sources":["components/ValidationUserYup/ValidationUserYup.jsx","webpack://goose_track/./src/components/LoginForm/LoginForm.module.scss?1c6d","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import * as Yup from \"yup\";\n\nexport const registerUserSchema = Yup.object().shape({\n    name: Yup.string().min(3, 'Too Short!').max(36, 'Too Long!').required('Required'),\n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string().min(6, 'Too Short!').max(16, 'Too Long!').required('Required'),\n});\n\nexport const loginUserSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Required to fill out'),\n    password: Yup.string().min(6, 'Too Short!').max(16, 'Too Long!').required('Required to fill out'),\n});","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"LoginForm_container__d3-dh\",\"form\":\"LoginForm_form__Kx5pU\",\"title\":\"LoginForm_title__cvnUl\",\"label\":\"LoginForm_label__RGIMj\",\"input\":\"LoginForm_input__7Ngg7\",\"button\":\"LoginForm_button__ph0FE\",\"link\":\"LoginForm_link__GY3qv\",\"icon\":\"LoginForm_icon__i+0e7\",\"bgimages\":\"LoginForm_bgimages__TRMcl\",\"bgImagesMsg\":\"LoginForm_bgImagesMsg__VCztp\",\"bgImagesText\":\"LoginForm_bgImagesText__9GvuW\",\"span\":\"LoginForm_span__OVKvo\",\"invalid-feedback\":\"LoginForm_invalid-feedback__BOlDn\",\"is-invalid\":\"LoginForm_is-invalid__0bagM\"};","import { Link, useNavigate } from 'react-router-dom';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport {\n  useDispatch,\n  // useSelector\n} from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { FiLogIn } from 'react-icons/fi';\n\n// import { selectorAuthStatus } from 'redux/auth/authSelector';\nimport { authLoginThunk } from 'redux/auth/auth.thunk';\nimport scss from './LoginForm.module.scss';\nimport { loginUserSchema } from 'components/ValidationUserYup/ValidationUserYup';\n\nconst initialState = {\n  email: '',\n  password: '',\n};\n\nconst LoginForm = () => {\n  //   const [values, setValues] = useState(initialState);\n  //   const status = useSelector(selectorAuthStatus);\n  //   const [showPassword, setShowPassword] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  //   const handleClickShowPassword = () => setShowPassword(show => !show);\n\n  //   const handleMouseDownPassword = event => {\n  //     event.preventDefault();\n  //   };\n\n  const handleSubmit = async (values, { resetForm }) => {\n    console.log(values);\n\n    try {\n      await dispatch(authLoginThunk(values)).unwrap();\n      Notiflix.Notify.success(\"It's ok!\");\n      resetForm();\n      navigate('/calendar/month');\n    } catch (error) {\n      console.log(error);\n      Notiflix.Notify.failure('Oops! You make some mistake:-(');\n    }\n  };\n\n  return (\n    <div className={scss.container}>\n      <div className={scss.bgimages}></div>\n      <div className={scss.bgImagesMsg}>\n        <p className={scss.bgImagesText}>\n          Quickly <span className={scss.span}>come in</span> and write down your\n          tasks for the day!\n        </p>\n      </div>\n      <Formik\n        const\n        initialValues={initialState}\n        validationSchema={loginUserSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ errors, touched, resetForm }) => (\n          <Form autoComplete=\"off\" className={scss.form}>\n            <h1 className={scss.title}>Log In</h1>\n            <label\n              className={\n                scss.label +\n                (errors.email && touched.email ? ' is-invalid' : '')\n              }\n            >\n              Email\n              <Field\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                placeholder=\"Enter email\"\n                className={\n                  scss.input +\n                  (errors.email && touched.email ? ' is-invalid' : '')\n                }\n                // onChange={handleChange}\n              />\n              <ErrorMessage\n                name=\"email\"\n                component=\"div\"\n                className=\"invalid-feedback\"\n              ></ErrorMessage>\n            </label>\n            <label\n              className={\n                scss.label +\n                (errors.password && touched.password ? ' is-invalid' : '')\n              }\n            >\n              Password\n              <Field\n                id=\"password\"\n                name=\"password\"\n                type={'password'}\n                placeholder=\"Enter password\"\n                className={\n                  scss.input +\n                  (errors.password && touched.password ? ' is-invalid' : '')\n                }\n                // onChange={handleChange}\n              />\n              <ErrorMessage\n                name=\"password\"\n                component=\"div\"\n                className=\"invalid-feedback\"\n              ></ErrorMessage>\n            </label>\n            <button className={scss.button} type=\"submit\">\n              Log in\n              <FiLogIn className={scss.icon} />\n            </button>\n          </Form>\n        )}\n      </Formik>\n      <Link className={scss.link} to=\"/register\">\n        Sign up\n      </Link>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","import LoginForm from \"components/LoginForm/LoginForm\";\n\nexport default function LoginPage() {\n    return (\n        <div>\n            <LoginForm/>\n        </div>\n    );\n}"],"names":["registerUserSchema","Yup","shape","name","min","max","required","email","password","loginUserSchema","initialState","dispatch","useDispatch","navigate","useNavigate","handleSubmit","values","resetForm","console","log","authLoginThunk","unwrap","Notiflix","className","scss","const","initialValues","validationSchema","onSubmit","errors","touched","autoComplete","id","type","placeholder","component","to","LoginPage"],"sourceRoot":""}